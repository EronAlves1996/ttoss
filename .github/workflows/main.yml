name: main

'on':
  push:
    branches:
      - main

concurrency:
  group: main
  cancel-in-progress: false

jobs:
  main:
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: us-east-1
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 20
          ssh-key: ${{ secrets.SSH_DEPLOY_KEY }}

      - name: Setup git user
        # https://github.com/actions/checkout/issues/13#issuecomment-724415212
        run: |
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config user.name "github-actions[bot]"

      - name: Skip if no changed packages
        run: yarn lerna changed || (echo "No changed packages. Skipping main workflow."; exit 0)

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'yarn'

      - name: Publish
        run: |
          # Don't publish if there are no changes
          if [[ ! $(yarn lerna changed) ]]; then
            yarn install --frozen-lockfile --prefer-offline
            
            export CARLIN_ENVIRONMENT=Production
            
            LATEST_TAG=$(git describe --tags --abbrev=0)

            # Setup NPM token
            echo //registry.npmjs.org/:\_authToken=${{ secrets.NPM_TOKEN }} > .npmrc

            # Build config to run lint-staged for lint and version bump
            yarn turbo run build --filter=@ttoss/config...

            # Build modified packages for version bump
            yarn turbo run build test lint --filter=[$LATEST_TAG]

            # Version before publish to rebuild all packages that Lerna will publish
            yarn lerna version --yes --no-push

            # Rebuild all packages that Lerna will publish
            yarn turbo run build lint test deploy --filter=[$LATEST_TAG]

            # Publish packages
            yarn lerna publish from-git --yes --no-verify-access

            # Push changes
            git push --follow-tags
          else
            echo "No changed packages. Skipping main workflow."
          fi
